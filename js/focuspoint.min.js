!function(t, e) {
    "use strict";
    e.IFA = {
        Models: {},
        Collections: {},
        Views: {},
        css: {
            _imageFocus: "image-focus",
            imageFocus: {
                _wrapper: "image-focus__wrapper",
                _img: "image-focus__img",
                _point: "image-focus__point",
                _clickarea: "image-focus__clickarea",
                _button: "image-focus__button"
            },
            _button: "button",
            button: {
                _primary: "button-primary",
                _disabled: "button-disabled"
            }
        },
        CalcService: {
            minMaxRange: function(t, e, i) {
                return Math.min(i, Math.max(e, t));
            }
        }
    }, t(document).on("ready", function() {
        new IFA.Views.ImageFocus({});
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Models.Attachment = Backbone.Model.extend({
        url: ajaxurl,
        apiArgs: [ "action" ],
        id: !1,
        defaults: {
            src: !1,
            width: !1,
            height: !1,
            offset: {
                x: !1,
                y: !1
            },
            focusPointOrigin: {
                x: !1,
                y: !1
            },
            focusPoint: {
                x: 50,
                y: 50
            },
            differState: !1,
            ajaxState: !1
        },
        $img: !1,
        initialize: function(t) {
            var e = this;
            this.$img = t.$img, this.fetchAttachmentData(), this.on("change:focusPointOrigin", function() {
                e.setDifferState(!0);
            }, this), this.on("change:differState", this.resetAjaxState, this);
        },
        fetchAttachmentData: function() {
            var e = this;
            this.fetch({
                url: ajaxurl + "?action=get-focuspoint",
                data: t.param({
                    id: this.id
                }),
                success: function(t, i, s) {
                    if (!0 === i.success) try {
                        e.validateFocusPoint(i), e.set({
                            src: i.src
                        }), e.set({
                            focusPointOrigin: i.focusPoint
                        }), e.set({
                            focusPoint: i.focusPoint
                        });
                    } catch (t) {
                        console.log(t);
                    }
                },
                error: function(t, e, i) {
                    console.log(e);
                }
            });
        },
        saveAttachmentData: function() {
            var t = this;
            this.set("ajaxState", "cropping"), this.save({}, {
                url: ajaxurl + "?action=initialize-crop",
                success: function(e, i, s) {
                    if (!0 === i.success) try {
                        t.validateFocusPoint(i), t.set({
                            focusPointOrigin: i.focusPoint
                        }), t.set("ajaxState", "success");
                    } catch (e) {
                        console.log(e), t.set("ajaxState", "failed");
                    }
                },
                error: function(e, i, s) {
                    t.set("ajaxState", "failed"), console.log(i);
                }
            });
        },
        setDifferState: function(t) {
            var e = this, i = this.get("focusPointOrigin"), s = this.get("focusPoint"), n = !1;
            i.x !== s.x && (n = !0), i.y !== s.y && (n = !0), this.set("differState", n), !0 !== t && !1 !== n || this.once("change:focusPoint", function() {
                e.setDifferState(!1);
            }, this);
        },
        resetAjaxState: function() {
            !0 === this.differState && self.model.set("ajaxState", !1);
        },
        validateFocusPoint: function(t) {
            if (!t.focusPoint.hasOwnProperty("x") || !t.focusPoint.hasOwnProperty("y")) throw "Wrong object properties";
        }
    });
}(jQuery, window), function(t, e) {
    IFA.Models.CropButton = Backbone.Model.extend({
        defaults: {
            text: focusPointL10n.cropButton,
            highlightState: !1,
            disableState: !0
        },
        initialize: function() {}
    });
}(jQuery, window), function(t, e) {
    IFA.Models.FocusInterface = Backbone.Model.extend({
        defaults: {
            width: 0,
            height: 0,
            radius: 0,
            offset: {
                x: 0,
                y: 0
            },
            position: {
                x: 0,
                y: 0
            },
            clickPosition: {
                x: 0,
                y: 0
            },
            initState: !1,
            moveState: !1,
            activeState: !1,
            hoverState: !1
        },
        initialize: function() {}
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Views.Attachment = Backbone.View.extend({
        initialize: function(i, s) {
            this.focusInterface = i.focusInterface, t(e).on("resize", _.bind(this.updateDimensions, this)), 
            this.model.once("change:focusPoint", this.updateDimensions, this), this.model.on("change:focusPointOrigin", this.updateDimensions, this), 
            this.focusInterface.on("change:activeState", this.updateDimensions, this);
        },
        updateDimensions: function() {
            var t = this.model.$img, e = {
                x: t.offset().left,
                y: t.offset().top
            };
            this.model.set({
                width: t.width(),
                height: t.height(),
                offset: e
            });
        }
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Views.Cropbutton = Backbone.View.extend({
        $cropButton: !1,
        initialize: function(e, i) {
            this.attachment = e.attachment;
            var s = '<button type="button" class="' + IFA.css.imageFocus._button + " " + IFA.css._button + ' crop-attachment"></button>';
            this.$el.append(s), this.$cropButton = t("." + IFA.css.imageFocus._button), this.$cropButton.on("click", _.bind(this.attachment.saveAttachmentData, this.attachment)), 
            this.attachment.on("change:differState", this.differStateHandler, this), this.attachment.on("change:ajaxState", this.ajaxStateHandler, this), 
            this.model.on("change:disableState", this.render, this), this.model.on("change:highlightState", this.render, this), 
            this.model.on("change:text", this.render, this), this.render();
        },
        render: function() {
            var t = this.model.get("text"), e = this.model.get("disableState"), i = this.model.get("highlightState");
            this.$cropButton.toggleClass(IFA.css.button._disabled, e), this.$cropButton.toggleClass(IFA.css.button._primary, i), 
            this.$cropButton.text(t);
        },
        differStateHandler: function() {
            !0 === this.attachment.get("differState") ? (this.model.set("text", focusPointL10n.cropButton), 
            this.highlight()) : this.disable();
        },
        ajaxStateHandler: function() {
            switch (this.attachment.get("ajaxState")) {
              case "cropping":
                this.model.set("text", focusPointL10n.cropButtonProgress), this.disable();
                break;

              case "success":
                this.model.set("text", focusPointL10n.cropButtonSuccess), this.disable();
                break;

              case "failed":
                this.model.set("text", focusPointL10n.cropButtonFailed), this.activate();
                break;

              default:
                this.model.set("text", focusPointL10n.cropButton);
            }
        },
        highlight: function() {
            this.model.set("disableState", !1), this.model.set("highlightState", !0);
        },
        activate: function() {
            this.model.set("disableState", !1), this.model.set("highlightState", !1);
        },
        disable: function() {
            this.model.set("disableState", !0), this.model.set("highlightState", !1);
        }
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Views.FocusInterface = Backbone.View.extend({
        template: !1,
        $img: !1,
        imgHtml: !1,
        $imageFocus: !1,
        $container: !1,
        $clickarea: !1,
        $focusPoint: !1,
        initialize: function(t, e) {
            this.attachment = t.attachment, this.template = wp.template("IFA-focus-point"), 
            this.$img = e.$img, this.$img.addClass(IFA.css.imageFocus._img), this.imgHtml = this.$img.get(0).outerHTML, 
            this.$img.wrap('<div class="IFA-container"></div>'), this.$container = this.$el.find(".IFA-container"), 
            this.render(), this.model.on("change:position", this.updateFocusPoint, this), this.attachment.once("change:focusPoint", this.updateDimensionData, this), 
            this.attachment.once("change:focusPoint", this.updateFocusPoint, this), this.setStateEvent("hoverState", "is-hover"), 
            this.setStateEvent("activeState", "is-active"), this.setStateEvent("moveState", "is-move"), 
            this.setStateEvent("initState", "is-initialized");
        },
        events: {},
        render: function() {
            var t = this.attachment.get("focusPoint");
            this.$container.html(this.template({
                imageObject: this.imgHtml,
                left: t.x,
                top: t.y,
                state: "is-initialized"
            })), this.setElements(), this.setEvents(), this.model.set("initState", !0);
        },
        setElements: function() {
            this.$imageFocus = this.$container.find("." + IFA.css._imageFocus), this.$clickarea = this.$container.find("." + IFA.css.imageFocus._clickarea), 
            this.$focusPoint = this.$container.find("." + IFA.css.imageFocus._point), this.attachment.$img = this.$img = this.$container.find("." + IFA.css.imageFocus._img), 
            this.attachment.$img = this.$img;
        },
        setEvents: function() {
            var i = this;
            this.$clickarea.on("mousedown", function(t) {
                1 === t.which && i.startMove(t, !0).move(t);
            }), this.$focusPoint.on("mousedown", function(t) {
                1 === t.which && i.startMove(t);
            }).on("mouseenter", function() {
                i.model.set("hoverState", !0);
            }).on("mouseleave", function() {
                i.model.set("hoverState", !1);
            }), t(e).on("mouseup", function(t) {
                1 === t.which && i.model.set({
                    moveState: !1,
                    activeState: !1
                });
            }).on("mousemove", function(t) {
                i.move(t);
            }).on("resize", function() {
                i.updateDimensionData().updateFocusPoint();
            });
        },
        startMove: function(t, e) {
            return this.updateDimensionData().updateClickPosition(t, e), this.model.set({
                moveState: !0,
                activeState: !0
            }), this;
        },
        move: function(t) {
            if (!1 === this.model.get("moveState")) return !1;
            var e = {
                x: t.pageX,
                y: t.pageY
            }, i = {}, s = this.attachment.get("offset"), n = this.model.get("clickPosition"), o = this.attachment.get("width"), a = this.attachment.get("height");
            i.x = e.x - s.x - n.x, i.y = e.y - s.y - n.y, i.x = IFA.CalcService.minMaxRange(i.x, 0, o), 
            i.y = IFA.CalcService.minMaxRange(i.y, 0, a);
            var c = {};
            return c.x = i.x / o * 100, c.y = i.y / a * 100, this.attachment.set({
                focusPoint: c
            }), this.model.set({
                position: i
            }), this;
        },
        updateFocusPoint: function() {
            var t = this.attachment.get("focusPoint"), e = this.model.get("position"), i = this.model.get("radius"), s = this.attachment.get("width"), n = this.attachment.get("height"), o = this.attachment.get("src"), a = {};
            return a.x = 0 - (e.x - i), a.y = 0 - (e.y - i), this.$focusPoint.css({
                left: t.x + "%",
                top: t.y + "%",
                backgroundImage: 'url("' + o + '")',
                backgroundSize: s + "px " + n + "px ",
                backgroundPosition: a.x + "px " + a.y + "px "
            }), this;
        },
        updateClickPosition: function(t, e) {
            var i = {
                x: 0,
                y: 0
            };
            if (!0 !== e) {
                var s = {
                    x: t.pageX,
                    y: t.pageY
                }, n = this.model.get("offset");
                (i = {}).x = s.x - n.x, i.y = s.y - n.y;
            }
            return this.model.set({
                clickPosition: i
            }), this;
        },
        updateDimensionData: function() {
            this.model.width = this.$focusPoint.width(), this.model.height = this.$focusPoint.height();
            var t = this.model.width / 2;
            this.model.set("radius", t);
            var e = this.$focusPoint.offset();
            this.model.set({
                offset: {
                    x: e.left + t,
                    y: e.top + t
                }
            });
            var i = this.attachment.get("focusPoint"), s = {
                x: i.x / 100 * this.attachment.get("width"),
                y: i.y / 100 * this.attachment.get("height")
            };
            return this.model.set({
                position: s
            }), this;
        },
        setStateEvent: function(t, e) {
            var i = this;
            this.model.on("change:" + t, function() {
                i.toggleClassState(t, e);
            });
        },
        toggleClassState: function(t, e) {
            var i = this.model.get(t);
            this.$imageFocus.toggleClass(e, i);
        }
    });
}(jQuery, window), function(t, e) {
    "use strict";
    IFA.Views.ImageFocus = Backbone.View.extend({
        initialize: function() {
            var e = this;
            setInterval(function() {
                var i = t(".attachment-details");
                i.length && !t(".IFA-initialized").length && i.each(function() {
                    var i = t(this);
                    e.startApplication(i);
                });
            }, 500);
        },
        startApplication: function(t) {
            var e = t.find(".details-image");
            t.addClass("IFA-initialized");
            var i = new IFA.Models.Attachment({
                id: t.data("id"),
                $img: e
            }), s = new IFA.Models.FocusInterface({}), n = new IFA.Models.CropButton();
            new IFA.Views.Attachment({
                model: i,
                focusInterface: s
            }), new IFA.Views.FocusInterface({
                el: t,
                model: s,
                attachment: i
            }, {
                $img: e
            }), new IFA.Views.Cropbutton({
                el: t.find(".attachment-actions"),
                model: n,
                attachment: i
            });
            s.set("state.init", !0);
        }
    });
}(jQuery, window);
//# sourceMappingURL=focuspoint.min.js.map